import {
    AccountId,
    PrivateKey,
    Client,
    FileCreateTransaction,
    ContractCreateTransaction,
    ContractCallQuery,
    Hbar,
    ContractFunctionParameters,
    FileAppendTransaction,
} from "@hashgraph/sdk";

import dotenv from "dotenv";
const bytecode =
    "0x608060405234801561001057600080fd5b5061159e806100206000396000f3fe608060405234801561001057600080fd5b50600436106103d05760003560e01c8063881c8fb7116101ff578063bb6b52431161011a578063e05e91e0116100ad578063f4e490f51161007c578063f4e490f514610c05578063f6e877f414610c26578063f8293f6e14610c4c578063ffb8050114610c6e57600080fd5b8063e05e91e014610b6f578063e066de5014610b96578063e0f53e2414610bbc578063e713cda814610be257600080fd5b8063cbd2e6a5116100e9578063cbd2e6a514610ad5578063cdb9e4e814610afa578063d79d4d4014610b20578063dbb04ed914610b4657600080fd5b8063bb6b524314610a3f578063c503772d14610a65578063c6c18a1c14610a85578063c7d8b87e14610aaf57600080fd5b8063a401d60d11610192578063b834bfe911610161578063b834bfe9146109b1578063b8da8d16146109d2578063b989c7ee146109f8578063ba945bdb14610a1957600080fd5b8063a401d60d14610923578063a75761f114610949578063b2db404a1461096a578063b4e3e7b11461098b57600080fd5b806398508ba3116101ce57806398508ba31461089a5780639b1794ae146108bb578063a08b9f67146108e1578063a1bda1221461090257600080fd5b8063881c8fb71461081157806388b7e6f514610837578063923f5edf1461085857806394cd7c801461087957600080fd5b806333520ec3116102ef57806364e008c11161028257806372a06b4d1161025157806372a06b4d14610788578063796a27ea146107a95780637d0dc262146107cf5780637ec32d84146107f057600080fd5b806364e008c1146106f957806368ef44661461071a5780636a54715c1461073b57806370a5cb811461075c57600080fd5b8063407b899b116102be578063407b899b1461069157806344e7b037146106b257806359adb2df14610587578063628bc3ef146106d857600080fd5b806333520ec3146106065780633b45e6e0146106275780633e1a2771146106485780633f396e671461066957600080fd5b806311ec6c901161036757806322937ea91161033657806322937ea9146105875780632ef16e8e146105a35780632f47a40d146105c45780632f6c1bb4146105e557600080fd5b806311ec6c90146104fe578063129ed5da1461051f57806312cd95a114610545578063189cea8e1461056657600080fd5b806308123e09116103a357806308123e09146104755780630a958dc81461049b57806310d54553146104bc578063118b8415146104dd57600080fd5b8063017fa10b146103d5578063021d88ab14610403578063037454301461042e57806306ac6fe11461044f575b600080fd5b6103e66103e336600461112a565b90565b6040516001600160801b0390911681526020015b60405180910390f35b6104116103e336600461153c565b6040516bffffffffffffffffffffffff90911681526020016103fa565b61043c6103e3366004610c92565b604051600c9190910b81526020016103fa565b61045d6103e3366004611103565b6040516001600160781b0390911681526020016103fa565b6104836103e336600461144e565b60405166ffffffffffffff90911681526020016103fa565b6104a96103e3366004610f87565b60405160049190910b81526020016103fa565b6104ca6103e3366004610d3e565b60405160119190910b81526020016103fa565b6104eb6103e3366004610f2d565b604051601e9190910b81526020016103fa565b61050c6103e3366004610da1565b60405160139190910b81526020016103fa565b61052d6103e336600461119f565b6040516001600160981b0390911681526020016103fa565b6105536103e3366004610d5f565b60405160129190910b81526020016103fa565b6105746103e3366004610e04565b60405160169190910b81526020016103fa565b6105956103e3366004610f4e565b6040519081526020016103fa565b6105b16103e3366004610f0c565b604051601d9190910b81526020016103fa565b6105d26103e336600461106d565b604051600a9190910b81526020016103fa565b6105f36103e3366004610e67565b60405160199190910b81526020016103fa565b6106146103e3366004610e88565b604051601a9190910b81526020016103fa565b6106356103e3366004610d1d565b60405160109190910b81526020016103fa565b6106566103e3366004610eca565b604051601c9190910b81526020016103fa565b6106776103e336600461149d565b60405168ffffffffffffffffff90911681526020016103fa565b61069f6103e3366004610fea565b60405160079190910b81526020016103fa565b6106c06103e33660046111e8565b6040516001600160a01b0390911681526020016103fa565b6106e66103e336600461104c565b60405160099190910b81526020016103fa565b6107076103e3366004610e25565b60405160179190910b81526020016103fa565b6107286103e3366004610dc2565b60405160149190910b81526020016103fa565b6107496103e3366004610fc9565b60405160069190910b81526020016103fa565b61076a6103e33660046110af565b6040516cffffffffffffffffffffffffff90911681526020016103fa565b6107966103e336600461102c565b60405160009190910b81526020016103fa565b6107b76103e33660046112f9565b6040516001600160d81b0390911681526020016103fa565b6107dd6103e3366004610ea9565b604051601b9190910b81526020016103fa565b6107fe6103e3366004610eeb565b60405160029190910b81526020016103fa565b61081f6103e3366004611236565b6040516001600160b01b0390911681526020016103fa565b6108456103e3366004610cfc565b604051600f9190910b81526020016103fa565b6108666103e3366004610de3565b60405160159190910b81526020016103fa565b6108876103e3366004610e46565b60405160189190910b81526020016103fa565b6108a86103e3366004610cba565b604051600d9190910b81526020016103fa565b6108c96103e336600461125d565b6040516001600160b81b0390911681526020016103fa565b6108ef6103e336600461108e565b604051600b9190910b81526020016103fa565b6109106103e3366004610d80565b60405160019190910b81526020016103fa565b6109316103e3366004611391565b6040516001600160f01b0390911681526020016103fa565b6109576103e33660046111c6565b60405161ffff90911681526020016103fa565b6109786103e3366004610fa8565b60405160059190910b81526020016103fa565b6109996103e33660046110dc565b6040516001600160701b0390911681526020016103fa565b6109bf6103e3366004610cdb565b604051600e9190910b81526020016103fa565b6109e06103e336600461120f565b6040516001600160a81b0390911681526020016103fa565b610a066103e3366004610f66565b60405160039190910b81526020016103fa565b610a276103e3366004611151565b6040516001600160881b0390911681526020016103fa565b610a4d6103e33660046112ab565b6040516001600160c81b0390911681526020016103fa565b610a736103e33660046114c6565b60405160ff90911681526020016103fa565b610a936103e3366004611511565b6040516affffffffffffffffffffff90911681526020016103fa565b610abd6103e33660046113b8565b6040516001600160f81b0390911681526020016103fa565b610ae36103e3366004611428565b60405165ffffffffffff90911681526020016103fa565b610b086103e3366004611320565b6040516001600160e01b0390911681526020016103fa565b610b2e6103e33660046112d2565b6040516001600160d01b0390911681526020016103fa565b610b546103e33660046114e7565b60405169ffffffffffffffffffff90911681526020016103fa565b610b7d6103e3366004611475565b60405167ffffffffffffffff90911681526020016103fa565b610ba46103e3366004611347565b6040516001600160e81b0390911681526020016103fa565b610bca6103e3366004611284565b6040516001600160c01b0390911681526020016103fa565b610bf06103e33660046113df565b60405163ffffffff90911681526020016103fa565b610c136103e336600461100b565b60405160089190910b81526020016103fa565b610c346103e3366004611178565b6040516001600160901b0390911681526020016103fa565b610c5a6103e336600461136e565b60405162ffffff90911681526020016103fa565b610c7c6103e3366004611403565b60405164ffffffffff90911681526020016103fa565b600060208284031215610ca3578081fd5b813580600c0b8114610cb3578182fd5b9392505050565b600060208284031215610ccb578081fd5b813580600d0b8114610cb3578182fd5b600060208284031215610cec578081fd5b813580600e0b8114610cb3578182fd5b600060208284031215610d0d578081fd5b813580600f0b8114610cb3578182fd5b600060208284031215610d2e578081fd5b81358060100b8114610cb3578182fd5b600060208284031215610d4f578081fd5b81358060110b8114610cb3578182fd5b600060208284031215610d70578081fd5b81358060120b8114610cb3578182fd5b600060208284031215610d91578081fd5b81358060010b8114610cb3578182fd5b600060208284031215610db2578081fd5b81358060130b8114610cb3578182fd5b600060208284031215610dd3578081fd5b81358060140b8114610cb3578182fd5b600060208284031215610df4578081fd5b81358060150b8114610cb3578182fd5b600060208284031215610e15578081fd5b81358060160b8114610cb3578182fd5b600060208284031215610e36578081fd5b81358060170b8114610cb3578182fd5b600060208284031215610e57578081fd5b81358060180b8114610cb3578182fd5b600060208284031215610e78578081fd5b81358060190b8114610cb3578182fd5b600060208284031215610e99578081fd5b813580601a0b8114610cb3578182fd5b600060208284031215610eba578081fd5b813580601b0b8114610cb3578182fd5b600060208284031215610edb578081fd5b813580601c0b8114610cb3578182fd5b600060208284031215610efc578081fd5b81358060020b8114610cb3578182fd5b600060208284031215610f1d578081fd5b813580601d0b8114610cb3578182fd5b600060208284031215610f3e578081fd5b813580601e0b8114610cb3578182fd5b600060208284031215610f5f578081fd5b5035919050565b600060208284031215610f77578081fd5b81358060030b8114610cb3578182fd5b600060208284031215610f98578081fd5b81358060040b8114610cb3578182fd5b600060208284031215610fb9578081fd5b81358060050b8114610cb3578182fd5b600060208284031215610fda578081fd5b81358060060b8114610cb3578182fd5b600060208284031215610ffb578081fd5b81358060070b8114610cb3578182fd5b60006020828403121561101c578081fd5b81358060080b8114610cb3578182fd5b60006020828403121561103d578081fd5b813580820b8114610cb3578182fd5b60006020828403121561105d578081fd5b81358060090b8114610cb3578182fd5b60006020828403121561107e578081fd5b813580600a0b8114610cb3578182fd5b60006020828403121561109f578081fd5b813580600b0b8114610cb3578182fd5b6000602082840312156110c0578081fd5b81356cffffffffffffffffffffffffff81168114610cb3578182fd5b6000602082840312156110ed578081fd5b81356001600160701b0381168114610cb3578182fd5b600060208284031215611114578081fd5b81356001600160781b0381168114610cb3578182fd5b60006020828403121561113b578081fd5b81356001600160801b0381168114610cb3578182fd5b600060208284031215611162578081fd5b81356001600160881b0381168114610cb3578182fd5b600060208284031215611189578081fd5b81356001600160901b0381168114610cb3578182fd5b6000602082840312156111b0578081fd5b81356001600160981b0381168114610cb3578182fd5b6000602082840312156111d7578081fd5b813561ffff81168114610cb3578182fd5b6000602082840312156111f9578081fd5b81356001600160a01b0381168114610cb3578182fd5b600060208284031215611220578081fd5b81356001600160a81b0381168114610cb3578182fd5b600060208284031215611247578081fd5b81356001600160b01b0381168114610cb3578182fd5b60006020828403121561126e578081fd5b81356001600160b81b0381168114610cb3578182fd5b600060208284031215611295578081fd5b81356001600160c01b0381168114610cb3578182fd5b6000602082840312156112bc578081fd5b81356001600160c81b0381168114610cb3578182fd5b6000602082840312156112e3578081fd5b81356001600160d01b0381168114610cb3578182fd5b60006020828403121561130a578081fd5b81356001600160d81b0381168114610cb3578182fd5b600060208284031215611331578081fd5b81356001600160e01b0381168114610cb3578182fd5b600060208284031215611358578081fd5b81356001600160e81b0381168114610cb3578182fd5b60006020828403121561137f578081fd5b813562ffffff81168114610cb3578182fd5b6000602082840312156113a2578081fd5b81356001600160f01b0381168114610cb3578182fd5b6000602082840312156113c9578081fd5b81356001600160f81b0381168114610cb3578182fd5b6000602082840312156113f0578081fd5b813563ffffffff81168114610cb3578182fd5b600060208284031215611414578081fd5b813564ffffffffff81168114610cb3578182fd5b600060208284031215611439578081fd5b813565ffffffffffff81168114610cb3578182fd5b60006020828403121561145f578081fd5b813566ffffffffffffff81168114610cb3578182fd5b600060208284031215611486578081fd5b813567ffffffffffffffff81168114610cb3578182fd5b6000602082840312156114ae578081fd5b813568ffffffffffffffffff81168114610cb3578182fd5b6000602082840312156114d7578081fd5b813560ff81168114610cb3578182fd5b6000602082840312156114f8578081fd5b813569ffffffffffffffffffff81168114610cb3578182fd5b600060208284031215611522578081fd5b81356affffffffffffffffffffff81168114610cb3578182fd5b60006020828403121561154d578081fd5b81356bffffffffffffffffffffffff81168114610cb3578182fdfea2646970667358221220ee9c5eb512d12505bd6c9485d164a2b013355a94c0c2b277d614e1d5614cc22d64736f6c63430008040033";

dotenv.config();

async function main() {
    //Grab your Hedera testnet account ID and private key from your .env file
    const myAccountId = AccountId.fromString("0.0.8918");
    const myPrivateKey = PrivateKey.fromString(
        "302e020100300506032b6570042204202a1062ecbf76659dd95761b8945f8d5d52a282904f96ce0c9c9b5077bc0bce63"
    );

    // If we weren't able to grab it, we should throw a new error
    if (myAccountId == null || myPrivateKey == null) {
        throw new Error(
            "Environment variables myAccountId and myPrivateKey must be present"
        );
    }

    // Create Hedera Testnet Client

    //The client has a default max transaction fee of 100,000,000 tinybars (1 hbar) and default max query payment of 100,000,000 tinybars (1 hbar).
    // If you need to change these values, you can use.setMaxDefaultTransactionFee() for a transaction and .setDefaultMaxQueryPayment() for queries.
    // So the max transaction fee is 1 hbar and the max query fee is 1 hbar, but those values can be changed
    const client = Client.forTestnet();

    // The operator is the account that will pay for the transaction query fees in HBAR
    client.setOperator(myAccountId, myPrivateKey);

    // Create a file on Hedera and store the bytecode
    const fileCreateTx = new FileCreateTransaction()
        .setKeys([myPrivateKey])
        .freezeWith(client);
    const fileCreateSign = await fileCreateTx.sign(myPrivateKey);
    const fileCreateSubmit = await fileCreateSign.execute(client);
    const fileCreateRx = await fileCreateSubmit.getReceipt(client);
    const bytecodeFileId = fileCreateRx.fileId;
    console.log(`- The bytecode file ID is: ${bytecodeFileId} \n`);

    //Append contents to the file
    const fileAppendTx = new FileAppendTransaction()
        .setFileId(bytecodeFileId)
        .setContents(bytecode)
        .setMaxChunks(10)
        .freezeWith(client);
    const fileAppendSign = await fileAppendTx.sign(myPrivateKey);
    const fileAppendSubmit = await fileAppendSign.execute(client);
    const fileAppendRx = await fileAppendSubmit.getReceipt(client);
    console.log("Status of file append is", fileAppendRx.status.toString());

    // Instantiate the contract instance
    const contractTx = await new ContractCreateTransaction()
        //Set the file ID of the Hedera file storing the bytecode
        .setBytecodeFileId(bytecodeFileId)
        //Set the gas to instantiate the contract
        .setGas(100000)
        //Provide the constructor parameters for the contract
        .setConstructorParameters();

    //Submit the transaction to the Hedera test network
    const contractResponse = await contractTx.execute(client);

    //Get the receipt of the file create transaction
    const contractReceipt = await contractResponse.getReceipt(client);

    //Get the smart contract ID
    const newContractId = contractReceipt.contractId;

    //Log the smart contract ID
    console.log("The smart contract ID is " + newContractId);

    // Calls a function of the smart contract
    //   const contractQuery = await new ContractCallQuery()
    //     //Set the gas for the query
    //     .setGas(15000000)
    //     //Set the contract ID to return the request for
    //     .setContractId(newContractId)
    //     //Set the contract function to call
    //     .setFunction(
    //       "returnUint",
    //       new ContractFunctionParameters().addUint24(16777215)
    //     )
    //     //Set the query payment for the node returning the request
    //     //This value must cover the cost of the request otherwise will fail
    //     .setQueryPayment(new Hbar(2));

    //   const contractQuery2 = await new ContractCallQuery()
    //     //Set the gas for the query
    //     .setGas(15000000)
    //     //Set the contract ID to return the request for
    //     .setContractId(newContractId)
    //     //Set the contract function to call
    //     .setFunction(
    //       "returnInt",
    //       new ContractFunctionParameters().addInt24(8388607)
    //     )
    //     //Set the query payment for the node returning the request
    //     //This value must cover the cost of the request otherwise will fail
    //     .setQueryPayment(new Hbar(2));

    const contractQuery3 = await new ContractCallQuery()
        //Set the gas for the query
        .setGas(15000000)
        //Set the contract ID to return the request for
        .setContractId(newContractId)
        //Set the contract function to call
        .setFunction(
            "returnInt256",
            new ContractFunctionParameters().addInt256(-1)
        )
        //Set the query payment for the node returning the request
        //This value must cover the cost of the request otherwise will fail
        .setQueryPayment(new Hbar(100));

    //Submit to a Hedera network
    //   const txResponse = await contractQuery.execute(client);
    //   const txResponse2 = await contractQuery2.execute(client);
    const txResponse3 = await contractQuery3.execute(client);

    //   console.log("Res1:", txResponse.getUint32(0));
    //   console.log("Res2:", txResponse2.getInt32(0));
    console.log("Res3:", txResponse3.getInt32(0));
}
main();
