/* eslint-disable mocha/no-setup-in-describe */
import {
    FileCreateTransaction,
    ContractCreateTransaction,
    ContractCallQuery,
    Hbar,
    ContractFunctionParameters,
    ContractDeleteTransaction,
    FileAppendTransaction,
    FileDeleteTransaction,
} from "../../src/exports.js";
import { REQUIRE_ARRAY_ERROR } from "../../src/util.js";
import IntegrationTestEnv from "./client/NodeIntegrationTestEnv.js";
import BigNumber from "bignumber.js";
import Long from "long";

const EXTREMUM = {
    MAX: "max",
    MIN: "min",
};

const METHOD_TYPE = {
    INT: "int",
    UINT: "uint",
};

const INPUT_TYPE = {
    NUMBER: "number",
    BIG_NUMBER: "BigNumber",
    LONG: "Long",
};
/**
 * @param {number} bitSize
 * @param {string} inputType
 * @returns {{ min: number, max: number}}
 */
const calculateRange = (bitSize, inputType) => {
    // As of ECMA-262 5th Edition, "all the positive and
    // negative integers whose magnitude is no greater
    // than 2^53 are representable in the Number type",
    // which is "representing the doubleprecision 64-bit
    // format IEEE 754 values as specified in the IEEE Standard
    // for Binary Floating-Point Arithmetic".
    // The maximum safe integer in JavaScript is 2^53-1.
    const MAX_EXPONENT = 53;

    let exponent = bitSize - 1;

    if (inputType === INPUT_TYPE.NUMBER && bitSize > MAX_EXPONENT) {
        exponent = MAX_EXPONENT;
    }

    const extremum = 2 ** exponent;

    return {
        min: extremum,
        max: extremum - 1,
    };
};

/**
 * @param {number} bitSize
 * @param {string} inputType
 * @returns {number[]}
 */
const createArray = (bitSize, inputType) => {
    const { min, max } = calculateRange(bitSize, inputType);

    switch (inputType) {
        case INPUT_TYPE.NUMBER:
            return [-min, max];
        case INPUT_TYPE.BIG_NUMBER:
            return [
                new BigNumber(-2).pow(bitSize - 1),
                new BigNumber(2).pow(bitSize - 1).minus(1),
            ];
        case INPUT_TYPE.LONG:
            return [new Long(min).neg(), new Long(max)];
        default:
            return [-min, max];
    }
};

/**
 * @param {string} extremum
 * @param {number} bitSize
 * @param {string} inputType
 * @param {string} methodType
 * @returns {string}
 */
const getDescription = (extremum, bitSize, inputType, methodType) => {
    switch (extremum) {
        case EXTREMUM.MIN:
            return `should return the right min ${methodType}${bitSize} value [${inputType}]`;
        case EXTREMUM.MAX:
            return `should return the right max ${methodType}${bitSize} value [${inputType}]`;
        default:
            return "An error occured.";
    }
};

/**
 * @param {number} bitSize
 * @param {string} inputType
 * @param {string} methodType
 * @returns {string}
 */
const getDescriptionForArrayMethod = (bitSize, inputType, methodType) =>
    `should return the right array of ${methodType}${bitSize} values [${inputType}]`;

let smartContractBytecode =
    "";

const bitSizes = [
    8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120, 128, 136, 144,
    152, 160, 168, 176, 184, 192, 200, 208, 216, 224, 232, 240, 248, 256,
];

describe("ContractFunctionParameters", function () {
    this.timeout(120000);
    let env;
    let newContractId;

    before(async function () {
        this.timeout(120000);
        env = await IntegrationTestEnv.new({ balance: 100000 });
        // Create a file on Hedera and store the bytecode
        const fileCreateTx = new FileCreateTransaction()
            .setKeys([env.operatorKey])
            .freezeWith(env.client);
        const fileCreateSign = await fileCreateTx.sign(env.operatorKey);
        const fileCreateSubmit = await fileCreateSign.execute(env.client);
        const fileCreateRx = await fileCreateSubmit.getReceipt(env.client);
        const bytecodeFileId = fileCreateRx.fileId;
        console.log(`- The bytecode file ID is: ${bytecodeFileId} \n`);

        //Append contents to the file
        const fileAppendTx = new FileAppendTransaction()
            .setFileId(bytecodeFileId)
            .setContents(smartContractBytecode)
            .setMaxChunks(20)
            .freezeWith(env.client);
        const fileAppendSign = await fileAppendTx.sign(env.operatorKey);
        const fileAppendSubmit = await fileAppendSign.execute(env.client);
        const fileAppendRx = await fileAppendSubmit.getReceipt(env.client);
        console.log(
            "Status of file append is",
            fileAppendRx.status.toString(10),
        );

        // Instantiate the contract instance
        const contractTx = new ContractCreateTransaction()
            //Set the file ID of the Hedera file storing the bytecode
            .setBytecodeFileId(bytecodeFileId)
            //Set the gas to instantiate the contract
            .setGas(500000)
            //Provide the constructor parameters for the contract
            .setConstructorParameters();

        //Submit the transaction to the Hedera test network
        const contractResponse = await contractTx.execute(env.client);

        //Get the receipt of the file create transaction
        const contractReceipt = await contractResponse.getReceipt(env.client);

        //Get the smart contract ID
        newContractId = contractReceipt.contractId;

        //Log the smart contract ID
        console.log("The smart contract ID is " + newContractId);
    });

    bitSizes.forEach((bitSize) => {
        describe(`Tests for addInt${bitSize} method`, function () {
            this.timeout(120000);
            it(
                getDescription(
                    EXTREMUM.MIN,
                    bitSize,
                    INPUT_TYPE.NUMBER,
                    METHOD_TYPE.INT,
                ),
                async function () {
                    this.timeout(120000);
                    const contractQuery = new ContractCallQuery()
                        //Set the gas for the query
                        .setGas(12000000)
                        //Set the contract ID to return the request for
                        .setContractId(newContractId)
                        //Set the contract function to call
                        .setFunction(
                            `returnInt${bitSize}`,
                            new ContractFunctionParameters()[
                                `addInt${bitSize}`
                            ](-calculateRange(bitSize, INPUT_TYPE.NUMBER).min),
                        )
                        //Set the query payment for the node returning the request
                        //This value must cover the cost of the request otherwise will fail
                        .setQueryPayment(new Hbar(10));

                    //Submit to a Hedera network
                    const txResponse = await contractQuery.execute(env.client);
                    expect(
                        txResponse[`getInt${bitSize}`](0).toString(10),
                    ).to.be.equal(
                        (-calculateRange(bitSize, INPUT_TYPE.NUMBER)
                            .min).toString(10),
                    );
                },
            );
            it(
                getDescription(
                    EXTREMUM.MAX,
                    bitSize,
                    INPUT_TYPE.NUMBER,
                    METHOD_TYPE.INT,
                ),
                async function () {
                    this.timeout(120000);
                    const contractQuery = new ContractCallQuery()
                        //Set the gas for the query
                        .setGas(12000000)
                        //Set the contract ID to return the request for
                        .setContractId(newContractId)
                        //Set the contract function to call
                        .setFunction(
                            `returnInt${bitSize}`,
                            new ContractFunctionParameters()[
                                `addInt${bitSize}`
                            ](calculateRange(bitSize, INPUT_TYPE.NUMBER).max),
                        )
                        //Set the query payment for the node returning the request
                        //This value must cover the cost of the request otherwise will fail
                        .setQueryPayment(new Hbar(10));

                    //Submit to a Hedera network
                    const txResponse = await contractQuery.execute(env.client);
                    expect(
                        txResponse[`getInt${bitSize}`](0).toString(10),
                    ).to.be.equal(
                        calculateRange(bitSize, INPUT_TYPE.NUMBER).max.toString(
                            10,
                        ),
                    );
                },
            );
            it(
                getDescription(
                    EXTREMUM.MIN,
                    bitSize,
                    INPUT_TYPE.BIG_NUMBER,
                    METHOD_TYPE.INT,
                ),
                async function () {
                    this.timeout(120000);
                    const contractQuery = new ContractCallQuery()
                        //Set the gas for the query
                        .setGas(12000000)
                        //Set the contract ID to return the request for
                        .setContractId(newContractId)
                        //Set the contract function to call
                        .setFunction(
                            `returnInt${bitSize}`,
                            new ContractFunctionParameters()[
                                `addInt${bitSize}`
                            ](new BigNumber(-2).pow(bitSize - 1)),
                        )
                        //Set the query payment for the node returning the request
                        //This value must cover the cost of the request otherwise will fail
                        .setQueryPayment(new Hbar(10));

                    //Submit to a Hedera network
                    const txResponse = await contractQuery.execute(env.client);
                    expect(
                        txResponse[`getInt${bitSize}`](0).toString(10),
                    ).to.be.equal(
                        new BigNumber(-2).pow(bitSize - 1).toString(10),
                    );
                },
            );
            it(
                getDescription(
                    EXTREMUM.MAX,
                    bitSize,
                    INPUT_TYPE.BIG_NUMBER,
                    METHOD_TYPE.INT,
                ),
                async function () {
                    this.timeout(120000);
                    const contractQuery = new ContractCallQuery()
                        //Set the gas for the query
                        .setGas(12000000)
                        //Set the contract ID to return the request for
                        .setContractId(newContractId)
                        //Set the contract function to call
                        .setFunction(
                            `returnInt${bitSize}`,
                            new ContractFunctionParameters()[
                                `addInt${bitSize}`
                            ](new BigNumber(2).pow(bitSize - 1).minus(1)),
                        )
                        //Set the query payment for the node returning the request
                        //This value must cover the cost of the request otherwise will fail
                        .setQueryPayment(new Hbar(10));

                    //Submit to a Hedera network
                    const txResponse = await contractQuery.execute(env.client);
                    expect(
                        txResponse[`getInt${bitSize}`](0).toString(10),
                    ).to.be.equal(
                        new BigNumber(2)
                            .pow(bitSize - 1)
                            .minus(1)
                            .toString(10),
                    );
                },
            );
            it(
                getDescription(
                    EXTREMUM.MIN,
                    bitSize,
                    INPUT_TYPE.LONG,
                    METHOD_TYPE.INT,
                ),
                async function () {
                    this.timeout(120000);
                    const contractQuery = new ContractCallQuery()
                        //Set the gas for the query
                        .setGas(12000000)
                        //Set the contract ID to return the request for
                        .setContractId(newContractId)
                        //Set the contract function to call
                        .setFunction(
                            `returnInt${bitSize}`,
                            new ContractFunctionParameters()[
                                `addInt${bitSize}`
                            ](new Long(calculateRange(bitSize).min).neg()),
                        )
                        //Set the query payment for the node returning the request
                        //This value must cover the cost of the request otherwise will fail
                        .setQueryPayment(new Hbar(10));

                    //Submit to a Hedera network
                    const txResponse = await contractQuery.execute(env.client);
                    expect(
                        txResponse[`getInt${bitSize}`](0).toString(10),
                    ).to.be.equal(
                        new Long(calculateRange(bitSize).min)
                            .neg()
                            .toString(10),
                    );
                },
            );
            it(
                getDescription(
                    EXTREMUM.MAX,
                    bitSize,
                    INPUT_TYPE.LONG,
                    METHOD_TYPE.INT,
                ),
                async function () {
                    this.timeout(120000);
                    const contractQuery = new ContractCallQuery()
                        //Set the gas for the query
                        .setGas(12000000)
                        //Set the contract ID to return the request for
                        .setContractId(newContractId)
                        //Set the contract function to call
                        .setFunction(
                            `returnInt${bitSize}`,
                            new ContractFunctionParameters()[
                                `addInt${bitSize}`
                            ](new Long(calculateRange(bitSize).max)),
                        )
                        //Set the query payment for the node returning the request
                        //This value must cover the cost of the request otherwise will fail
                        .setQueryPayment(new Hbar(10));

                    //Submit to a Hedera network
                    const txResponse = await contractQuery.execute(env.client);
                    expect(
                        txResponse[`getInt${bitSize}`](0).toString(10),
                    ).to.be.equal(
                        new Long(calculateRange(bitSize).max).toString(10),
                    );
                },
            );
        });

        describe(`Tests for addInt${bitSize}Array method`, function () {
            this.timeout(120000);
            it(
                getDescriptionForArrayMethod(
                    bitSize,
                    INPUT_TYPE.NUMBER,
                    METHOD_TYPE.INT,
                ),
                async function () {
                    this.timeout(120000);
                    const arr = createArray(bitSize, INPUT_TYPE.NUMBER);
                    const contractQuery = new ContractCallQuery()
                        //Set the gas for the query
                        .setGas(12000000)
                        //Set the contract ID to return the request for
                        .setContractId(newContractId)
                        //Set the contract function to call
                        .setFunction(
                            `returnInt${bitSize}Array`,
                            new ContractFunctionParameters()[
                                `addInt${bitSize}Array`
                            ](arr),
                        )
                        //Set the query payment for the node returning the request
                        //This value must cover the cost of the request otherwise will fail
                        .setQueryPayment(new Hbar(10));

                    //Submit to a Hedera network
                    const txResponse = await contractQuery.execute(env.client);
                    const result = txResponse.getResult([`int${bitSize}[]`])[0];

                    expect(result).to.be.an("array");
                    arr.map((item, i) => {
                        expect(item.toString(10)).to.be.equal(
                            result[i].toString(10),
                        );
                    });
                },
            );

            it(
                getDescriptionForArrayMethod(
                    bitSize,
                    INPUT_TYPE.BIG_NUMBER,
                    METHOD_TYPE.INT,
                ),
                async function () {
                    const arr = createArray(bitSize, INPUT_TYPE.BIG_NUMBER);
                    const contractQuery = new ContractCallQuery()
                        //Set the gas for the query
                        .setGas(12000000)
                        //Set the contract ID to return the request for
                        .setContractId(newContractId)
                        //Set the contract function to call
                        .setFunction(
                            `returnInt${bitSize}Array`,
                            new ContractFunctionParameters()[
                                `addInt${bitSize}Array`
                            ](arr),
                        )
                        //Set the query payment for the node returning the request
                        //This value must cover the cost of the request otherwise will fail
                        .setQueryPayment(new Hbar(10));

                    //Submit to a Hedera network
                    const txResponse = await contractQuery.execute(env.client);
                    const result = txResponse.getResult([`int${bitSize}[]`])[0];

                    expect(result).to.be.an("array");
                    arr.map((item, i) => {
                        expect(item.toString(10)).to.be.equal(
                            result[i].toString(10),
                        );
                    });
                },
            );

            it(
                getDescriptionForArrayMethod(
                    bitSize,
                    INPUT_TYPE.LONG,
                    METHOD_TYPE.INT,
                ),
                async function () {
                    const arr = createArray(bitSize, INPUT_TYPE.LONG);
                    const contractQuery = new ContractCallQuery()
                        //Set the gas for the query
                        .setGas(12000000)
                        //Set the contract ID to return the request for
                        .setContractId(newContractId)
                        //Set the contract function to call
                        .setFunction(
                            `returnInt${bitSize}Array`,
                            new ContractFunctionParameters()[
                                `addInt${bitSize}Array`
                            ](arr),
                        )
                        //Set the query payment for the node returning the request
                        //This value must cover the cost of the request otherwise will fail
                        .setQueryPayment(new Hbar(10));

                    //Submit to a Hedera network
                    const txResponse = await contractQuery.execute(env.client);
                    const result = txResponse.getResult([`int${bitSize}[]`])[0];

                    expect(result).to.be.an("array");
                    arr.map((item, i) => {
                        expect(item.toString(10)).to.be.equal(
                            result[i].toString(10),
                        );
                    });
                },
            );

            it(`addInt${bitSize}Array method should return an empty array`, async function () {
                const contractQuery = new ContractCallQuery()
                    //Set the gas for the query
                    .setGas(12000000)
                    //Set the contract ID to return the request for
                    .setContractId(newContractId)
                    //Set the contract function to call
                    .setFunction(
                        `returnInt${bitSize}Array`,
                        new ContractFunctionParameters()[
                            `addInt${bitSize}Array`
                        ](
                            // eslint-disable-next-line no-loss-of-precision
                            [],
                        ),
                    )
                    //Set the query payment for the node returning the request
                    //This value must cover the cost of the request otherwise will fail
                    .setQueryPayment(new Hbar(10));

                //Submit to a Hedera network
                const txResponse = await contractQuery.execute(env.client);
                const result = txResponse.getResult([`uint${bitSize}[]`])[0];
                expect(result).to.be.an("array").to.have.length(0);
            });

            it(`addInt${bitSize}Array method should throw an error`, async function () {
                try {
                    new ContractCallQuery()
                        //Set the gas for the query
                        .setGas(12000000)
                        //Set the contract ID to return the request for
                        .setContractId(newContractId)
                        //Set the contract function to call
                        .setFunction(
                            `returnInt${bitSize}Array`,
                            new ContractFunctionParameters()[
                                `addInt${bitSize}Array`
                            ](),
                        )
                        //Set the query payment for the node returning the request
                        //This value must cover the cost of the request otherwise will fail
                        .setQueryPayment(new Hbar(10));
                } catch (error) {
                    expect(error).to.be.instanceOf(Error);
                    expect(error.message).to.be.equal(REQUIRE_ARRAY_ERROR);
                }
            });
        });

        describe(`Tests for addUint${bitSize} method`, function () {
            it(
                getDescription(
                    EXTREMUM.MAX,
                    bitSize,
                    INPUT_TYPE.NUMBER,
                    METHOD_TYPE.UINT,
                ),
                async function () {
                    const contractQuery = new ContractCallQuery()
                        //Set the gas for the query
                        .setGas(12000000)
                        //Set the contract ID to return the request for
                        .setContractId(newContractId)
                        //Set the contract function to call
                        .setFunction(
                            `returnUint${bitSize}`,
                            new ContractFunctionParameters()[
                                `addUint${bitSize}`
                            ](calculateRange(bitSize, INPUT_TYPE.NUMBER).max),
                        )
                        //Set the query payment for the node returning the request
                        //This value must cover the cost of the request otherwise will fail
                        .setQueryPayment(new Hbar(10));

                    //Submit to a Hedera network
                    const txResponse = await contractQuery.execute(env.client);
                    expect(
                        txResponse[`getUint${bitSize}`](0).toString(10),
                    ).to.be.equal(
                        calculateRange(bitSize, INPUT_TYPE.NUMBER).max.toString(
                            10,
                        ),
                    );
                },
            );
            it(
                getDescription(
                    EXTREMUM.MAX,
                    bitSize,
                    INPUT_TYPE.BIG_NUMBER,
                    METHOD_TYPE.UINT,
                ),
                async function () {
                    const contractQuery = new ContractCallQuery()
                        //Set the gas for the query
                        .setGas(12000000)
                        //Set the contract ID to return the request for
                        .setContractId(newContractId)
                        //Set the contract function to call
                        .setFunction(
                            `returnUint${bitSize}`,
                            new ContractFunctionParameters()[
                                `addUint${bitSize}`
                            ](new BigNumber(2).pow(bitSize - 1).minus(1)),
                        )
                        //Set the query payment for the node returning the request
                        //This value must cover the cost of the request otherwise will fail
                        .setQueryPayment(new Hbar(10));

                    //Submit to a Hedera network
                    const txResponse = await contractQuery.execute(env.client);
                    expect(
                        txResponse[`getUint${bitSize}`](0).toString(10),
                    ).to.be.equal(
                        new BigNumber(2)
                            .pow(bitSize - 1)
                            .minus(1)
                            .toString(10),
                    );
                },
            );
            it(
                getDescription(
                    EXTREMUM.MAX,
                    bitSize,
                    INPUT_TYPE.LONG,
                    METHOD_TYPE.UINT,
                ),
                async function () {
                    const contractQuery = new ContractCallQuery()
                        //Set the gas for the query
                        .setGas(12000000)
                        //Set the contract ID to return the request for
                        .setContractId(newContractId)
                        //Set the contract function to call
                        .setFunction(
                            `returnUint${bitSize}`,
                            new ContractFunctionParameters()[
                                `addUint${bitSize}`
                            ](new Long(calculateRange(bitSize).max)),
                        )
                        //Set the query payment for the node returning the request
                        //This value must cover the cost of the request otherwise will fail
                        .setQueryPayment(new Hbar(10));

                    //Submit to a Hedera network
                    const txResponse = await contractQuery.execute(env.client);
                    expect(
                        txResponse[`getUint${bitSize}`](0).toString(10),
                    ).to.be.equal(
                        new Long(calculateRange(bitSize).max).toString(10),
                    );
                },
            );
        });

        describe(`Tests for addUint${bitSize}Array method`, function () {
            it(
                getDescriptionForArrayMethod(
                    bitSize,
                    INPUT_TYPE.NUMBER,
                    METHOD_TYPE.UINT,
                ),
                async function () {
                    const range = calculateRange(bitSize, INPUT_TYPE.NUMBER);
                    const arr = [0, range.min + range.max];
                    const contractQuery = new ContractCallQuery()
                        //Set the gas for the query
                        .setGas(12000000)
                        //Set the contract ID to return the request for
                        .setContractId(newContractId)
                        //Set the contract function to call
                        .setFunction(
                            `returnUint${bitSize}Array`,
                            new ContractFunctionParameters()[
                                `addUint${bitSize}Array`
                            ](arr),
                        )
                        //Set the query payment for the node returning the request
                        //This value must cover the cost of the request otherwise will fail
                        .setQueryPayment(new Hbar(10));

                    //Submit to a Hedera network
                    const txResponse = await contractQuery.execute(env.client);
                    const result = txResponse.getResult([
                        `uint${bitSize}[]`,
                    ])[0];

                    expect(result).to.be.an("array");
                    arr.map((item, i) => {
                        expect(item.toString(10)).to.be.equal(
                            result[i].toString(10),
                        );
                    });
                },
            );
            it(
                getDescriptionForArrayMethod(
                    bitSize,
                    INPUT_TYPE.BIG_NUMBER,
                    METHOD_TYPE.UINT,
                ),
                async function () {
                    const arr = [0, new BigNumber(2).pow(bitSize - 1).minus(1)];
                    const contractQuery = new ContractCallQuery()
                        //Set the gas for the query
                        .setGas(12000000)
                        //Set the contract ID to return the request for
                        .setContractId(newContractId)
                        //Set the contract function to call
                        .setFunction(
                            `returnUint${bitSize}Array`,
                            new ContractFunctionParameters()[
                                `addUint${bitSize}Array`
                            ](arr),
                        )
                        //Set the query payment for the node returning the request
                        //This value must cover the cost of the request otherwise will fail
                        .setQueryPayment(new Hbar(10));

                    //Submit to a Hedera network
                    const txResponse = await contractQuery.execute(env.client);
                    const result = txResponse.getResult([
                        `uint${bitSize}[]`,
                    ])[0];

                    expect(result).to.be.an("array");
                    arr.map((item, i) => {
                        expect(item.toString(10)).to.be.equal(
                            result[i].toString(10),
                        );
                    });
                },
            );
            it(
                getDescriptionForArrayMethod(
                    bitSize,
                    INPUT_TYPE.LONG,
                    METHOD_TYPE.UINT,
                ),
                async function () {
                    const range = calculateRange(bitSize, INPUT_TYPE.NUMBER);
                    const arr = [0, new Long(range.min + range.max)];
                    const contractQuery = new ContractCallQuery()
                        //Set the gas for the query
                        .setGas(12000000)
                        //Set the contract ID to return the request for
                        .setContractId(newContractId)
                        //Set the contract function to call
                        .setFunction(
                            `returnUint${bitSize}Array`,
                            new ContractFunctionParameters()[
                                `addUint${bitSize}Array`
                            ](arr),
                        )
                        //Set the query payment for the node returning the request
                        //This value must cover the cost of the request otherwise will fail
                        .setQueryPayment(new Hbar(10));

                    //Submit to a Hedera network
                    const txResponse = await contractQuery.execute(env.client);
                    const result = txResponse.getResult([
                        `uint${bitSize}[]`,
                    ])[0];

                    expect(result).to.be.an("array");
                    arr.map((item, i) => {
                        expect(item.toString(10)).to.be.equal(
                            result[i].toString(10),
                        );
                    });
                },
            );

            it(`addUint${bitSize}Array method should return an empty array`, async function () {
                const contractQuery = new ContractCallQuery()
                    //Set the gas for the query
                    .setGas(12000000)
                    //Set the contract ID to return the request for
                    .setContractId(newContractId)
                    //Set the contract function to call
                    .setFunction(
                        `returnUint${bitSize}Array`,
                        new ContractFunctionParameters()[
                            `addUint${bitSize}Array`
                        ](
                            // eslint-disable-next-line no-loss-of-precision
                            [],
                        ),
                    )
                    //Set the query payment for the node returning the request
                    //This value must cover the cost of the request otherwise will fail
                    .setQueryPayment(new Hbar(10));

                //Submit to a Hedera network
                const txResponse = await contractQuery.execute(env.client);
                const result = txResponse.getResult([`uint${bitSize}[]`])[0];
                expect(result).to.be.an("array").to.have.length(0);
            });

            it(`addUint${bitSize}Array method should throw an error`, async function () {
                try {
                    new ContractCallQuery()
                        //Set the gas for the query
                        .setGas(12000000)
                        //Set the contract ID to return the request for
                        .setContractId(newContractId)
                        //Set the contract function to call
                        .setFunction(
                            `returnUint${bitSize}Array`,
                            new ContractFunctionParameters()[
                                `addUint${bitSize}Array`
                            ](),
                        )
                        //Set the query payment for the node returning the request
                        //This value must cover the cost of the request otherwise will fail
                        .setQueryPayment(new Hbar(10));
                } catch (error) {
                    expect(error).to.be.instanceOf(Error);
                    expect(error.message).to.be.equal(REQUIRE_ARRAY_ERROR);
                }
            });
        });
    });

    it("should return the right min multiple int8 value", async function () {
        const contractQuery = new ContractCallQuery()
            //Set the gas for the query
            .setGas(12000000)
            //Set the contract ID to return the request for
            .setContractId(newContractId)
            //Set the contract function to call
            .setFunction(
                "returnInt8Multiple", // return two params: input & input (+) 20 // -128 + 20 = - 108
                new ContractFunctionParameters().addInt8(-128),
            )
            //Set the query payment for the node returning the request
            //This value must cover the cost of the request otherwise will fail
            .setQueryPayment(new Hbar(10));

        //Submit to a Hedera network
        const txResponse = await contractQuery.execute(env.client);

        expect(txResponse.getInt8(0)).to.be.equal(-128);
        expect(txResponse.getInt8(1)).to.be.equal(-108);
    });

    it("should work the right way with 0 uint32 value", async function () {
        const contractQuery = new ContractCallQuery()
            //Set the gas for the query
            .setGas(12000000)
            //Set the contract ID to return the request for
            .setContractId(newContractId)
            //Set the contract function to call
            .setFunction(
                "returnUint32",
                new ContractFunctionParameters().addUint32(0),
            )
            //Set the query payment for the node returning the request
            //This value must cover the cost of the request otherwise will fail
            .setQueryPayment(new Hbar(10));

        //Submit to a Hedera network
        const txResponse = await contractQuery.execute(env.client);

        expect(txResponse.getUint32(0)).to.be.equal(0);
    });

    it("should return the right multiple values", async function () {
        const contractQuery = new ContractCallQuery()
            //Set the gas for the query
            .setGas(12000000)
            //Set the contract ID to return the request for
            .setContractId(newContractId)
            //Set the contract function to call
            .setFunction(
                "returnMultipleTypeParams",
                new ContractFunctionParameters().addUint32(4294967295),
            )
            //Set the query payment for the node returning the request
            //This value must cover the cost of the request otherwise will fail
            .setQueryPayment(new Hbar(10));

        //Submit to a Hedera network
        const txResponse = await contractQuery.execute(env.client);

        const result = txResponse.getResult(["uint32", "uint64", "string"]);
        expect(result[0]).to.be.equal(4294967295); // first param returned by the contrast is in UINT32
        expect(result[1].toNumber()).to.be.equal(4294967294); // second param returned by the contract is in UINT64
        expect(result[2]).to.be.equal("OK"); // third param returned by the contract is in STRING
    });

    it("should return the right multiple int40 values", async function () {
        const contractQuery = new ContractCallQuery()
            //Set the gas for the query
            .setGas(12000000)
            //Set the contract ID to return the request for
            .setContractId(newContractId)
            //Set the contract function to call
            .setFunction(
                "returnMultipleInt40",
                new ContractFunctionParameters().addInt40(549755813885),
            )
            //Set the query payment for the node returning the request
            //This value must cover the cost of the request otherwise will fail
            .setQueryPayment(new Hbar(10));

        //Submit to a Hedera network
        const txResponse = await contractQuery.execute(env.client);

        expect(txResponse.getInt40(0).toNumber()).to.be.equal(549755813885);
        expect(txResponse.getInt40(1).toNumber()).to.be.equal(549755813886);
    });

    it("should return the right zero uint256 value", async function () {
        const contractQuery = new ContractCallQuery()
            //Set the gas for the query
            .setGas(12000000)
            //Set the contract ID to return the request for
            .setContractId(newContractId)
            //Set the contract function to call
            .setFunction(
                "returnUint256",
                new ContractFunctionParameters().addUint256(
                    // eslint-disable-next-line no-loss-of-precision
                    0,
                ),
            )
            //Set the query payment for the node returning the request
            //This value must cover the cost of the request otherwise will fail
            .setQueryPayment(new Hbar(10));

        //Submit to a Hedera network
        const txResponse = await contractQuery.execute(env.client);

        expect(txResponse.getUint256(0).toNumber()).to.be.equal(
            // eslint-disable-next-line no-loss-of-precision
            0,
        );
    });

    it("should return the right 20 decimal uint256 value", async function () {
        const contractQuery = new ContractCallQuery()
            //Set the gas for the query
            .setGas(12000000)
            //Set the contract ID to return the request for
            .setContractId(newContractId)
            //Set the contract function to call
            .setFunction(
                "returnUint256",
                new ContractFunctionParameters().addUint256(
                    // eslint-disable-next-line no-loss-of-precision
                    5000000000000000000000,
                ),
            )
            //Set the query payment for the node returning the request
            //This value must cover the cost of the request otherwise will fail
            .setQueryPayment(new Hbar(10));

        //Submit to a Hedera network
        const txResponse = await contractQuery.execute(env.client);

        expect(txResponse.getUint256(0).toNumber()).to.be.equal(
            // eslint-disable-next-line no-loss-of-precision
            5000000000000000000000,
        );
    });

    it("should return the again right uint256 value", async function () {
        const contractQuery = new ContractCallQuery()
            //Set the gas for the query
            .setGas(12000000)
            //Set the contract ID to return the request for
            .setContractId(newContractId)
            //Set the contract function to call
            .setFunction(
                "returnUint256",
                new ContractFunctionParameters().addUint256(
                    // eslint-disable-next-line no-loss-of-precision
                    50,
                ),
            )
            //Set the query payment for the node returning the request
            //This value must cover the cost of the request otherwise will fail
            .setQueryPayment(new Hbar(10));

        //Submit to a Hedera network
        const txResponse = await contractQuery.execute(env.client);

        expect(txResponse.getUint256(0).toNumber()).to.be.equal(
            // eslint-disable-next-line no-loss-of-precision
            50,
        );
    });

    it("contract create of A nonce, which deploys contract B in CONSTRUCTOR", async function () {
        const SMART_CONTRACT_BYTECODE =
            "6080604052348015600f57600080fd5b50604051601a90603b565b604051809103906000f0801580156035573d6000803e3d6000fd5b50506047565b605c8061009483390190565b603f806100556000396000f3fe6080604052600080fdfea2646970667358221220a20122cbad3457fedcc0600363d6e895f17048f5caa4afdab9e655123737567d64736f6c634300081200336080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea264697066735822122053dfd8835e3dc6fedfb8b4806460b9b7163f8a7248bac510c6d6808d9da9d6d364736f6c63430008120033";

        const fileCreate = await new FileCreateTransaction()
            .setKeys([env.operatorKey])
            .setContents(SMART_CONTRACT_BYTECODE)
            .execute(env.client);

        const fileId = (await fileCreate.getReceipt(env.client)).fileId;

        const contractCreate = await new ContractCreateTransaction()
            .setAdminKey(env.operatorKey)
            .setGas(100000)
            .setBytecodeFileId(fileId)
            .setContractMemo("[e2e::ContractADeploysContractBInConstructor]")
            .execute(env.client);

        const contractCreateRecord = await contractCreate.getRecord(env.client);
        const nonces =
            contractCreateRecord.contractFunctionResult.contractNonces;
        console.log(`contractNonces: ${JSON.stringify(nonces)}`);

        const contractId = contractCreateRecord.receipt.contractId;
        const contractAnonce = nonces.find(
            (nonceInfo) =>
                nonceInfo.contractId.toString() === contractId.toString(),
        );
        const contractBnonce = nonces.find(
            (nonceInfo) =>
                nonceInfo.contractId.toString() !== contractId.toString(),
        );

        expect(contractAnonce.nonce.toNumber()).to.be.equal(2);
        expect(contractBnonce.nonce.toNumber()).to.be.equal(1);

        const contractDeleteTx = await new ContractDeleteTransaction()
            .setTransferAccountId(env.operatorId)
            .setContractId(contractId)
            .execute(env.client);

        const contractDeleteResult = await contractDeleteTx.getReceipt(
            env.client,
        );
        console.log(
            `contractDelete status: ${contractDeleteResult.status.toString()}`,
        );

        const fileDeleteTx = await new FileDeleteTransaction()
            .setFileId(fileId)
            .execute(env.client);

        const fileDeleteResult = await fileDeleteTx.getReceipt(env.client);
        console.log(`fileDelete status: ${fileDeleteResult.status.toString()}`);
    });

    after(async function () {
        await env.close();
    });
});
