syntax = "proto3";

package proto;

/*-
 * ‌
 * Hedera Network Services Protobuf
 * ​
 * Copyright (C) 2018 - 2021 Hedera Hashgraph, LLC
 * ​
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ‍
 */

option java_package = "com.hederahashgraph.api.proto.java";
option java_multiple_files = true;

enum ResponseCodeEnum {
  OK = 0; // The transaction passed the precheck validations.
  INVALID_TRANSACTION = 1; // For any error not handled by specific error codes listed below.
  PAYER_ACCOUNT_NOT_FOUND = 2; //Payer account does not exist.
  INVALID_NODE_ACCOUNT = 3; //Node Account provided does not match the node account of the node the transaction was submitted to.
  TRANSACTION_EXPIRED = 4; // Pre-Check error when TransactionValidStart + transactionValidDuration is less than current consensus time.
  INVALID_TRANSACTION_START = 5; // Transaction start time is greater than current consensus time
  INVALID_TRANSACTION_DURATION = 6; //valid transaction duration is a positive non zero number that does not exceed 120 seconds
  INVALID_SIGNATURE = 7; // The transaction signature is not valid
  MEMO_TOO_LONG = 8; //Transaction memo size exceeded 100 bytes
  INSUFFICIENT_TX_FEE = 9; // The fee provided in the transaction is insufficient for this type of transaction
  INSUFFICIENT_PAYER_BALANCE = 10; // The payer account has insufficient cryptocurrency to pay the transaction fee
  DUPLICATE_TRANSACTION = 11; // This transaction ID is a duplicate of one that was submitted to this node or reached consensus in the last 180 seconds (receipt period)
  BUSY = 12; //If API is throttled out
  NOT_SUPPORTED = 13; //The API is not currently supported

  INVALID_FILE_ID = 14; //The file id is invalid or does not exist
  INVALID_ACCOUNT_ID = 15; //The account id is invalid or does not exist
  INVALID_CONTRACT_ID = 16; //The contract id is invalid or does not exist
  INVALID_TRANSACTION_ID = 17; //Transaction id is not valid
  RECEIPT_NOT_FOUND = 18; //Receipt for given transaction id does not exist
  RECORD_NOT_FOUND = 19; //Record for given transaction id does not exist
  INVALID_SOLIDITY_ID = 20; //The solidity id is invalid or entity with this solidity id does not exist


  UNKNOWN = 21; // The responding node has submitted the transaction to the network. Its final status is still unknown.
  SUCCESS = 22; // The transaction succeeded
  FAIL_INVALID = 23; // There was a system error and the transaction failed because of invalid request parameters.
  FAIL_FEE = 24; // There was a system error while performing fee calculation, reserved for future.
  FAIL_BALANCE = 25; // There was a system error while performing balance checks, reserved for future.


  KEY_REQUIRED = 26; //Key not provided in the transaction body
  BAD_ENCODING = 27; //Unsupported algorithm/encoding used for keys in the transaction
  INSUFFICIENT_ACCOUNT_BALANCE = 28; //When the account balance is not sufficient for the transfer
  INVALID_SOLIDITY_ADDRESS = 29; //During an update transaction when the system is not able to find the Users Solidity address


  INSUFFICIENT_GAS = 30; //Not enough gas was supplied to execute transaction
  CONTRACT_SIZE_LIMIT_EXCEEDED = 31; //contract byte code size is over the limit
  LOCAL_CALL_MODIFICATION_EXCEPTION = 32; //local execution (query) is requested for a function which changes state
  CONTRACT_REVERT_EXECUTED = 33; //Contract REVERT OPCODE executed
  CONTRACT_EXECUTION_EXCEPTION = 34; //For any contract execution related error not handled by specific error codes listed above.
  INVALID_RECEIVING_NODE_ACCOUNT = 35; //In Query validation, account with +ve(amount) value should be Receiving node account, the receiver account should be only one account in the list
  MISSING_QUERY_HEADER = 36; // Header is missing in Query request


  ACCOUNT_UPDATE_FAILED = 37; // The update of the account failed
  INVALID_KEY_ENCODING = 38; // Provided key encoding was not supported by the system
  NULL_SOLIDITY_ADDRESS = 39; // null solidity address

  CONTRACT_UPDATE_FAILED = 40; // update of the contract failed
  INVALID_QUERY_HEADER = 41; // the query header is invalid

  INVALID_FEE_SUBMITTED = 42; // Invalid fee submitted
  INVALID_PAYER_SIGNATURE = 43; // Payer signature is invalid


  KEY_NOT_PROVIDED = 44; // The keys were not provided in the request.
  INVALID_EXPIRATION_TIME = 45; // Expiration time provided in the transaction was invalid.
  NO_WACL_KEY = 46; //WriteAccess Control Keys are not provided for the file
  FILE_CONTENT_EMPTY = 47; //The contents of file are provided as empty.
  INVALID_ACCOUNT_AMOUNTS = 48; // The crypto transfer credit and debit do not sum equal to 0
  EMPTY_TRANSACTION_BODY = 49; // Transaction body provided is empty
  INVALID_TRANSACTION_BODY = 50; // Invalid transaction body provided


  INVALID_SIGNATURE_TYPE_MISMATCHING_KEY = 51; // the type of key (base ed25519 key, KeyList, or ThresholdKey) does not match the type of signature (base ed25519 signature, SignatureList, or ThresholdKeySignature)
  INVALID_SIGNATURE_COUNT_MISMATCHING_KEY = 52; // the number of key (KeyList, or ThresholdKey) does not match that of signature (SignatureList, or ThresholdKeySignature). e.g. if a keyList has 3 base keys, then the corresponding signatureList should also have 3 base signatures.

  EMPTY_LIVE_HASH_BODY = 53; // the livehash body is empty
  EMPTY_LIVE_HASH = 54; // the livehash data is missing
  EMPTY_LIVE_HASH_KEYS = 55; // the keys for a livehash are missing
  INVALID_LIVE_HASH_SIZE = 56; // the livehash data is not the output of a SHA-384 digest

  EMPTY_QUERY_BODY = 57; // the query body is empty
  EMPTY_LIVE_HASH_QUERY = 58; // the crypto livehash query is empty
  LIVE_HASH_NOT_FOUND = 59; // the livehash is not present
  ACCOUNT_ID_DOES_NOT_EXIST = 60; // the account id passed has not yet been created.
  LIVE_HASH_ALREADY_EXISTS = 61; // the livehash already exists for a given account


  INVALID_FILE_WACL = 62; // File WACL keys are invalid
  SERIALIZATION_FAILED = 63; // Serialization failure
  TRANSACTION_OVERSIZE = 64; // The size of the Transaction is greater than transactionMaxBytes
  TRANSACTION_TOO_MANY_LAYERS = 65; // The Transaction has more than 50 levels
  CONTRACT_DELETED = 66; //Contract is marked as deleted

  PLATFORM_NOT_ACTIVE = 67; // the platform node is either disconnected or lagging behind.
  KEY_PREFIX_MISMATCH = 68; // one public key matches more than one prefixes on the signature map
  PLATFORM_TRANSACTION_NOT_CREATED = 69; // transaction not created by platform due to large backlog
  INVALID_RENEWAL_PERIOD = 70; // auto renewal period is not a positive number of seconds
  INVALID_PAYER_ACCOUNT_ID = 71; // the response code when a smart contract id is passed for a crypto API request
  ACCOUNT_DELETED = 72; // the account has been marked as deleted
  FILE_DELETED = 73; // the file has been marked as deleted
  ACCOUNT_REPEATED_IN_ACCOUNT_AMOUNTS = 74; // same accounts repeated in the transfer account list
  SETTING_NEGATIVE_ACCOUNT_BALANCE = 75; // attempting to set negative balance value for crypto account
  OBTAINER_REQUIRED =76; // when deleting smart contract that has crypto balance either transfer account or transfer smart contract is required
  OBTAINER_SAME_CONTRACT_ID =77; //when deleting smart contract that has crypto balance you can not use the same contract id as transferContractId as the one being deleted
  OBTAINER_DOES_NOT_EXIST = 78; //transferAccountId or transferContractId specified for contract delete does not exist
  MODIFYING_IMMUTABLE_CONTRACT = 79; //attempting to modify (update or delete a immutable smart contract, i.e. one created without a admin key)
  FILE_SYSTEM_EXCEPTION = 80; //Unexpected exception thrown by file system functions
  AUTORENEW_DURATION_NOT_IN_RANGE = 81; // the duration is not a subset of [MINIMUM_AUTORENEW_DURATION,MAXIMUM_AUTORENEW_DURATION]
  ERROR_DECODING_BYTESTRING = 82; // Decoding the smart contract binary to a byte array failed. Check that the input is a valid hex string.
  CONTRACT_FILE_EMPTY = 83; // File to create a smart contract was of length zero
  CONTRACT_BYTECODE_EMPTY = 84; // Bytecode for smart contract is of length zero
  INVALID_INITIAL_BALANCE=85; // Attempt to set negative initial balance
  INVALID_RECEIVE_RECORD_THRESHOLD=86 [deprecated=true]; // [Deprecated]. attempt to set negative receive record threshold
  INVALID_SEND_RECORD_THRESHOLD=87 [deprecated=true]; // [Deprecated]. attempt to set negative send record threshold
  ACCOUNT_IS_NOT_GENESIS_ACCOUNT = 88; // Special Account Operations should be performed by only Genesis account, return this code if it is not Genesis Account
  PAYER_ACCOUNT_UNAUTHORIZED = 89; // The fee payer account doesn't have permission to submit such Transaction
  INVALID_FREEZE_TRANSACTION_BODY = 90; // FreezeTransactionBody is invalid
  FREEZE_TRANSACTION_BODY_NOT_FOUND = 91; // FreezeTransactionBody does not exist
  TRANSFER_LIST_SIZE_LIMIT_EXCEEDED = 92; //Exceeded the number of accounts (both from and to) allowed for crypto transfer list
  RESULT_SIZE_LIMIT_EXCEEDED = 93; // Smart contract result size greater than specified maxResultSize
  NOT_SPECIAL_ACCOUNT = 94; //The payer account is not a special account(account 0.0.55)
  CONTRACT_NEGATIVE_GAS = 95; // Negative gas was offered in smart contract call
  CONTRACT_NEGATIVE_VALUE = 96; // Negative value / initial balance was specified in a smart contract call / create
  INVALID_FEE_FILE=97; // Failed to update fee file
  INVALID_EXCHANGE_RATE_FILE=98; // Failed to update exchange rate file
  INSUFFICIENT_LOCAL_CALL_GAS = 99; // Payment tendered for contract local call cannot cover both the fee and the gas
  ENTITY_NOT_ALLOWED_TO_DELETE = 100; // Entities with Entity ID below 1000 are not allowed to be deleted
  AUTHORIZATION_FAILED = 101; // Violating one of these rules: 1) treasury account can update all entities below 0.0.1000, 2) account 0.0.50 can update all entities from 0.0.51 - 0.0.80, 3) Network Function Master Account A/c 0.0.50 - Update all Network Function accounts & perform all the Network Functions listed below, 4) Network Function Accounts: i) A/c 0.0.55 - Update Address Book files (0.0.101/102), ii) A/c 0.0.56 - Update Fee schedule (0.0.111), iii) A/c 0.0.57 - Update Exchange Rate (0.0.112).
  FILE_UPLOADED_PROTO_INVALID = 102; // Fee Schedule Proto uploaded but not valid (append or update is required)
  FILE_UPLOADED_PROTO_NOT_SAVED_TO_DISK = 103; // Fee Schedule Proto uploaded but not valid (append or update is required)
  FEE_SCHEDULE_FILE_PART_UPLOADED = 104; // Fee Schedule Proto File Part uploaded
  EXCHANGE_RATE_CHANGE_LIMIT_EXCEEDED = 105; // The change on Exchange Rate exceeds Exchange_Rate_Allowed_Percentage
  MAX_CONTRACT_STORAGE_EXCEEDED = 106; // Contract permanent storage exceeded the currently allowable limit
  TRANSFER_ACCOUNT_SAME_AS_DELETE_ACCOUNT = 107; // Transfer Account should not be same as Account to be deleted
  TOTAL_LEDGER_BALANCE_INVALID = 108;
  EXPIRATION_REDUCTION_NOT_ALLOWED = 110; // The expiration date/time on a smart contract may not be reduced
  MAX_GAS_LIMIT_EXCEEDED = 111; //Gas exceeded currently allowable gas limit per transaction
  MAX_FILE_SIZE_EXCEEDED = 112; // File size exceeded the currently allowable limit
  RECEIVER_SIG_REQUIRED = 113; // When a valid signature is not provided for operations on account with receiverSigRequired=true

  INVALID_TOPIC_ID = 150; // The Topic ID specified is not in the system.
  INVALID_ADMIN_KEY = 155; // A provided admin key was invalid.
  INVALID_SUBMIT_KEY = 156; // A provided submit key was invalid.
  UNAUTHORIZED = 157; // An attempted operation was not authorized (ie - a deleteTopic for a topic with no adminKey).
  INVALID_TOPIC_MESSAGE = 158; // A ConsensusService message is empty.
  INVALID_AUTORENEW_ACCOUNT = 159; // The autoRenewAccount specified is not a valid, active account.
  AUTORENEW_ACCOUNT_NOT_ALLOWED = 160; // An adminKey was not specified on the topic, so there must not be an autoRenewAccount.
  // The topic has expired, was not automatically renewed, and is in a 7 day grace period before the topic will be
  // deleted unrecoverably. This error response code will not be returned until autoRenew functionality is supported
  // by HAPI.
  TOPIC_EXPIRED = 162;
  INVALID_CHUNK_NUMBER = 163; // chunk number must be from 1 to total (chunks) inclusive.
  INVALID_CHUNK_TRANSACTION_ID = 164; // For every chunk, the payer account that is part of initialTransactionID must match the Payer Account of this transaction. The entire initialTransactionID should match the transactionID of the first chunk, but this is not checked or enforced by Hedera except when the chunk number is 1.
  ACCOUNT_FROZEN_FOR_TOKEN = 165; // Account is frozen and cannot transact with the token
  TOKENS_PER_ACCOUNT_LIMIT_EXCEEDED = 166; // An involved account already has more than <tt>tokens.maxPerAccount</tt> associations with non-deleted tokens.
  INVALID_TOKEN_ID = 167; // The token is invalid or does not exist
  INVALID_TOKEN_DECIMALS = 168; // Invalid token decimals
  INVALID_TOKEN_INITIAL_SUPPLY = 169; // Invalid token initial supply
  INVALID_TREASURY_ACCOUNT_FOR_TOKEN = 170; // Treasury Account does not exist or is deleted
  INVALID_TOKEN_SYMBOL = 171; // Token Symbol is not UTF-8 capitalized alphabetical string
  TOKEN_HAS_NO_FREEZE_KEY = 172; // Freeze key is not set on token
  TRANSFERS_NOT_ZERO_SUM_FOR_TOKEN = 173; // Amounts in transfer list are not net zero
  MISSING_TOKEN_SYMBOL = 174; // A token symbol was not provided
  TOKEN_SYMBOL_TOO_LONG = 175; // The provided token symbol was too long
  ACCOUNT_KYC_NOT_GRANTED_FOR_TOKEN = 176; // KYC must be granted and account does not have KYC granted
  TOKEN_HAS_NO_KYC_KEY = 177; // KYC key is not set on token
  INSUFFICIENT_TOKEN_BALANCE = 178; // Token balance is not sufficient for the transaction
  TOKEN_WAS_DELETED = 179; // Token transactions cannot be executed on deleted token
  TOKEN_HAS_NO_SUPPLY_KEY = 180; // Supply key is not set on token
  TOKEN_HAS_NO_WIPE_KEY = 181; // Wipe key is not set on token
  INVALID_TOKEN_MINT_AMOUNT = 182; // The requested token mint amount would cause an invalid total supply
  INVALID_TOKEN_BURN_AMOUNT = 183; // The requested token burn amount would cause an invalid total supply
  TOKEN_NOT_ASSOCIATED_TO_ACCOUNT = 184; // A required token-account relationship is missing
  CANNOT_WIPE_TOKEN_TREASURY_ACCOUNT = 185; // The target of a wipe operation was the token treasury account
  INVALID_KYC_KEY = 186; // The provided KYC key was invalid.
  INVALID_WIPE_KEY = 187; // The provided wipe key was invalid.
  INVALID_FREEZE_KEY = 188; // The provided freeze key was invalid.
  INVALID_SUPPLY_KEY = 189; // The provided supply key was invalid.
  MISSING_TOKEN_NAME = 190; // Token Name is not provided
  TOKEN_NAME_TOO_LONG = 191; // Token Name is too long
  INVALID_WIPING_AMOUNT = 192; // The provided wipe amount must not be negative, zero or bigger than the token holder balance
  TOKEN_IS_IMMUTABLE = 193; // Token does not have Admin key set, thus update/delete transactions cannot be performed
  TOKEN_ALREADY_ASSOCIATED_TO_ACCOUNT = 194; // An <tt>associateToken</tt> operation specified a token already associated to the account
  TRANSACTION_REQUIRES_ZERO_TOKEN_BALANCES = 195; // An attempted operation is invalid until all token balances for the target account are zero
  ACCOUNT_IS_TREASURY = 196; // An attempted operation is invalid because the account is a treasury
  TOKEN_ID_REPEATED_IN_TOKEN_LIST = 197; // Same TokenIDs present in the token list
  TOKEN_TRANSFER_LIST_SIZE_LIMIT_EXCEEDED = 198; // Exceeded the number of token transfers (both from and to) allowed for token transfer list
  EMPTY_TOKEN_TRANSFER_BODY = 199; // TokenTransfersTransactionBody has no TokenTransferList
  EMPTY_TOKEN_TRANSFER_ACCOUNT_AMOUNTS = 200; // TokenTransfersTransactionBody has a TokenTransferList with no AccountAmounts

  INVALID_SCHEDULE_ID = 201; // The Scheduled entity does not exist; or has now expired, been deleted, or been executed
  SCHEDULE_IS_IMMUTABLE = 202; // The Scheduled entity cannot be modified. Admin key not set
  INVALID_SCHEDULE_PAYER_ID = 203; // The provided Scheduled Payer does not exist
  INVALID_SCHEDULE_ACCOUNT_ID = 204; // The Schedule Create Transaction TransactionID account does not exist
  NO_NEW_VALID_SIGNATURES = 205; // The provided sig map did not contain any new valid signatures from required signers of the scheduled transaction
  UNRESOLVABLE_REQUIRED_SIGNERS = 206; // The required signers for a scheduled transaction cannot be resolved, for example because they do not exist or have been deleted
  SCHEDULED_TRANSACTION_NOT_IN_WHITELIST = 207; // Only whitelisted transaction types may be scheduled
  SOME_SIGNATURES_WERE_INVALID = 208; // At least one of the signatures in the provided sig map did not represent a valid signature for any required signer
  TRANSACTION_ID_FIELD_NOT_ALLOWED = 209; // The scheduled field in the TransactionID may not be set to true
  IDENTICAL_SCHEDULE_ALREADY_CREATED = 210; // A schedule already exists with the same identifying fields of an attempted ScheduleCreate (that is, all fields other than scheduledPayerAccountID)
  INVALID_ZERO_BYTE_IN_STRING = 211; // A string field in the transaction has a UTF-8 encoding with the prohibited zero byte
  SCHEDULE_ALREADY_DELETED = 212; // A schedule being signed or deleted has already been deleted
  SCHEDULE_ALREADY_EXECUTED = 213; // A schedule being signed or deleted has already been executed
  MESSAGE_SIZE_TOO_LARGE = 214; // ConsensusSubmitMessage request's message size is larger than allowed.
  OPERATION_REPEATED_IN_BUCKET_GROUPS = 215; // An operation was assigned to more than one throttle group in a given bucket
  BUCKET_CAPACITY_OVERFLOW = 216; // The capacity needed to satisfy all opsPerSec groups in a bucket overflowed a signed 8-byte integral type
  NODE_CAPACITY_NOT_SUFFICIENT_FOR_OPERATION = 217; // Given the network size in the address book, the node-level capacity for an operation would never be enough to accept a single request; usually means a bucket burstPeriod should be increased
  BUCKET_HAS_NO_THROTTLE_GROUPS = 218; // A bucket was defined without any throttle groups
  THROTTLE_GROUP_HAS_ZERO_OPS_PER_SEC = 219; // A throttle group was granted zero opsPerSec
  SUCCESS_BUT_MISSING_EXPECTED_OPERATION = 220; // The throttle definitions file was updated, but some supported operations were not assigned a bucket
  UNPARSEABLE_THROTTLE_DEFINITIONS = 221; // The new contents for the throttle definitions system file were not valid protobuf
  INVALID_THROTTLE_DEFINITIONS = 222; // The new throttle definitions system file were invalid, and no more specific error could be divined
  ACCOUNT_EXPIRED_AND_PENDING_REMOVAL = 223; // The transaction references an account which has passed its expiration without renewal funds available, and currently remains in the ledger only because of the grace period given to expired entities
  INVALID_TOKEN_MAX_SUPPLY = 224; // Invalid token max supply
  INVALID_TOKEN_NFT_SERIAL_NUMBER = 225; // Invalid token nft serial number
  INVALID_NFT_ID = 226; // Invalid nft id
  METADATA_TOO_LONG = 227; // Nft metadata is too long
  BATCH_SIZE_LIMIT_EXCEEDED = 228; // Repeated operations count exceeds the limit
  INVALID_QUERY_RANGE = 229; // The range of data to be gathered is out of the set boundaries
  FRACTION_DIVIDES_BY_ZERO = 230; // A custom fractional fee set a denominator of zero
  INSUFFICIENT_PAYER_BALANCE_FOR_CUSTOM_FEE = 231 [deprecated = true]; // The transaction payer could not afford a custom fee
  CUSTOM_FEES_LIST_TOO_LONG = 232; // More than 10 custom fees were specified
  INVALID_CUSTOM_FEE_COLLECTOR = 233; // Any of the feeCollector accounts for customFees is invalid
  INVALID_TOKEN_ID_IN_CUSTOM_FEES = 234; // Any of the token Ids in customFees is invalid
  TOKEN_NOT_ASSOCIATED_TO_FEE_COLLECTOR = 235; // Any of the token Ids in customFees are not associated to feeCollector
  TOKEN_MAX_SUPPLY_REACHED = 236; // A token cannot have more units minted due to its configured supply ceiling
  SENDER_DOES_NOT_OWN_NFT_SERIAL_NO = 237; // The transaction attempted to move an NFT serial number from an account other than its owner
  CUSTOM_FEE_NOT_FULLY_SPECIFIED = 238; // A custom fee schedule entry did not specify either a fixed or fractional fee
  CUSTOM_FEE_MUST_BE_POSITIVE = 239; // Only positive fees may be assessed at this time
  TOKEN_HAS_NO_FEE_SCHEDULE_KEY = 240; // Fee schedule key is not set on token
  CUSTOM_FEE_OUTSIDE_NUMERIC_RANGE = 241; // A fractional custom fee exceeded the range of a 64-bit signed integer
  INVALID_CUSTOM_FRACTIONAL_FEES_SUM = 242; // The sum of all custom fractional fees must be strictly less than 1
  FRACTIONAL_FEE_MAX_AMOUNT_LESS_THAN_MIN_AMOUNT = 243; // Each fractional custom fee must have its maximum_amount, if specified, at least its minimum_amount
  CUSTOM_SCHEDULE_ALREADY_HAS_NO_FEES = 244; // A fee schedule update tried to clear the custom fees from a token whose fee schedule was already empty
  CUSTOM_FEE_DENOMINATION_MUST_BE_FUNGIBLE_COMMON = 245; // Only tokens of type FUNGIBLE_COMMON can be used to as fee schedule denominations
  CUSTOM_FRACTIONAL_FEE_ONLY_ALLOWED_FOR_FUNGIBLE_COMMON = 246; // Only tokens of type FUNGIBLE_COMMON can have fractional fees
  INVALID_CUSTOM_FEE_SCHEDULE_KEY = 247; // The provided custom fee schedule key was invalid
  INVALID_TOKEN_MINT_METADATA = 248; // The requested token mint metadata was invalid
  INVALID_TOKEN_BURN_METADATA = 249; // The requested token burn metadata was invalid
  CURRENT_TREASURY_STILL_OWNS_NFTS = 250; // The treasury for a unique token cannot be changed until it owns no NFTs
  ACCOUNT_STILL_OWNS_NFTS = 251; // An account cannot be dissociated from a unique token if it owns NFTs for the token
  TREASURY_MUST_OWN_BURNED_NFT = 252; // A NFT can only be burned when owned by the unique token's treasury
  ACCOUNT_DOES_NOT_OWN_WIPED_NFT = 253; // An account did not own the NFT to be wiped
  ACCOUNT_AMOUNT_TRANSFERS_ONLY_ALLOWED_FOR_FUNGIBLE_COMMON = 254; // An AccountAmount token transfers list referenced a token type other than FUNGIBLE_COMMON
  MAX_NFTS_IN_PRICE_REGIME_HAVE_BEEN_MINTED = 255; // All the NFTs allowed in the current price regime have already been minted
  PAYER_ACCOUNT_DELETED = 256; // The payer account has been marked as deleted
  CUSTOM_FEE_CHARGING_EXCEEDED_MAX_RECURSION_DEPTH = 257; // The reference chain of custom fees for a transferred token exceeded the maximum length of 2
  CUSTOM_FEE_CHARGING_EXCEEDED_MAX_ACCOUNT_AMOUNTS = 258; // More than 20 balance adjustments were to satisfy a CryptoTransfer and its implied custom fee payments
  INSUFFICIENT_SENDER_ACCOUNT_BALANCE_FOR_CUSTOM_FEE = 259; // The sender account in the token transfer transaction could not afford a custom fee

}
